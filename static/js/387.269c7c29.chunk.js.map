{"version":3,"file":"static/js/387.269c7c29.chunk.js","mappings":"6NAEaA,E,OAAUC,GAAAA,QAAH,mFAIpBD,EAAQE,YAAc,U,sBC+BtB,EAhCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,IAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBN,GAASO,KAAKH,EAC/B,GAAE,CAACJ,KAECG,EACH,OAAO,KAET,IAAQK,EAAYL,EAAZK,QAER,OACE,UAACX,EAAD,WACGW,EAAQC,OAAS,IAAK,qEACtBD,IACC,wBACGA,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,2BACE,wBACE,oCAAYD,QAEd,uBAAIC,MAJGD,EADE,QAYtB,C,uJC7BD,IAAME,EAAW,gCACXC,EAAM,mCAEL,SAASC,IACd,OAAOC,MAAM,GAAD,OAAIH,EAAJ,uCAA2CC,IAAOP,MAAK,SAAAU,GAAG,OACpEA,EAAIC,MADgE,GAGvE,CAEM,SAASC,EAAgBC,GAC9B,OAAOJ,MAAM,GAAD,OACPH,EADO,iCAC0BC,EAD1B,kBACuCM,IACjDb,MAAK,SAAAU,GACL,OAAIA,EAAII,GACCJ,EAAIC,OAENI,QAAQC,OACb,IAAIC,MAAJ,mHAAiCJ,EAAjC,2BAEH,GACF,CAEM,SAASK,EAAgBC,GAC9B,OAAOV,MAAM,GAAD,OAAIH,EAAJ,kBAAsBa,EAAtB,oBAAyCZ,IAAOP,MAAK,SAAAU,GAC/D,OAAIA,EAAII,GACCJ,EAAIC,OAENI,QAAQC,OAAO,IAAIC,MAAJ,yDAAyBE,EAAzB,2BACvB,GACF,CAEM,SAASC,EAAaD,GAC3B,OAAOV,MAAM,GAAD,OAAIH,EAAJ,kBAAsBa,EAAtB,4BAAiDZ,IAAOP,MAClE,SAAAU,GAAG,OAAIA,EAAIC,MAAR,GAEN,CAEM,SAASZ,EAAgBoB,GAC9B,OAAOV,MAAM,GAAD,OAAIH,EAAJ,kBAAsBa,EAAtB,4BAAiDZ,IAAOP,MAClE,SAAAU,GAAG,OAAIA,EAAIC,MAAR,GAEN,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api-movie.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Section = styled.section`\r\n  padding: 0 16px 5px;\r\n  border-bottom: 1px solid black;\r\n`;\r\nSection.displayName = 'Section';\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Section } from './Reviews.styled';\r\nimport { getMovieReviews } from 'services/api-movie';\r\n\r\nconst Reviews = () => {\r\n  const { movieId } = useParams();\r\n  const [reviews, setReviews] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getMovieReviews(movieId).then(setReviews);\r\n  }, [movieId]);\r\n\r\n  if (!reviews) {\r\n    return null;\r\n  }\r\n  const { results } = reviews;\r\n\r\n  return (\r\n    <Section>\r\n      {results.length < 1 && <p> We don't have any reviews for this movie</p>}\r\n      {results && (\r\n        <ul>\r\n          {results.map(({ author, content }) => (\r\n            <li key={author}>\r\n              <p>\r\n                <b>Author: {author}</b>\r\n              </p>\r\n              <p>{content}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n","// /trending/get-trending - список самых популярных фильмов на сегодня для создания коллекции на главной странице.\r\n// /search/search-movies - поиск кинофильма по ключевому слову на странице фильмов.\r\n// /movies/get-movie-details - запрос полной информации о фильме для страницы кинофильма.\r\n// /movies/get-movie-credits - запрос информации о актёрском составе для страницы кинофильма.\r\n// /movies/get-movie-reviews - запрос обзоров для страницы кинофильма.\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst KEY = '479d2ea313055d36744e81dfb1070205';\r\n\r\nexport function getTrendingMovies() {\r\n  return fetch(`${BASE_URL}trending/movie/week?api_key=${KEY}`).then(res =>\r\n    res.json()\r\n  );\r\n}\r\n\r\nexport function getSearchMovies(searchQuery) {\r\n  return fetch(\r\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\r\n  ).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(\r\n      new Error(`Фильмов с названием ${searchQuery} нет :(`)\r\n    );\r\n  });\r\n}\r\n\r\nexport function getMovieDetails(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}?api_key=${KEY}`).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(new Error(`Фильма с ID ${muvieId} нет :(`));\r\n  });\r\n}\r\n\r\nexport function getMovieCast(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}/credits?api_key=${KEY}`).then(\r\n    res => res.json()\r\n  );\r\n}\r\n\r\nexport function getMovieReviews(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}/reviews?api_key=${KEY}`).then(\r\n    res => res.json()\r\n  );\r\n}\r\n"],"names":["Section","styled","displayName","movieId","useParams","useState","reviews","setReviews","useEffect","getMovieReviews","then","results","length","map","author","content","BASE_URL","KEY","getTrendingMovies","fetch","res","json","getSearchMovies","searchQuery","ok","Promise","reject","Error","getMovieDetails","muvieId","getMovieCast"],"sourceRoot":""}