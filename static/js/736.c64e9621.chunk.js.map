{"version":3,"file":"static/js/736.c64e9621.chunk.js","mappings":"iPAEaA,EAAUC,EAAAA,GAAAA,QAAH,mFAIpBD,EAAQE,YAAc,UAEf,IAAMC,EAAMF,EAAAA,GAAAA,IAAH,8DAIhBE,EAAID,YAAc,M,aC0BlB,EAjCa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAMA,IAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaN,GAASO,KAAKH,EAC5B,GAAE,CAACJ,KAECG,EACH,OAAO,KAET,IAAQK,EAASL,EAATK,KAER,OACE,SAACZ,EAAD,WACE,wBACGY,EAAKC,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC/BC,EAAQ,yCAAqCD,GAEnD,OACE,0BACGA,IAAgB,SAACd,EAAD,CAAKgB,IAAKD,EAAUE,IAAKL,KACxCE,IAAgB,SAACd,EAAD,CAAKgB,IAJX,0DAI4BC,IAAKL,KAC7C,uBAAIA,IACHC,IAAa,uCAAeA,OAJtBF,EAOZ,OAIR,C,uJC9BD,IAAMO,EAAW,gCACXC,EAAM,mCAEL,SAASC,IACd,OAAOC,MAAM,GAAD,OAAIH,EAAJ,uCAA2CC,IAAOX,MAAK,SAAAc,GAAG,OACpEA,EAAIC,MADgE,GAGvE,CAEM,SAASC,EAAgBC,GAC9B,OAAOJ,MAAM,GAAD,OACPH,EADO,iCAC0BC,EAD1B,kBACuCM,IACjDjB,MAAK,SAAAc,GACL,OAAIA,EAAII,GACCJ,EAAIC,OAENI,QAAQC,OACb,IAAIC,MAAJ,mHAAiCJ,EAAjC,2BAEH,GACF,CAEM,SAASK,EAAgBC,GAC9B,OAAOV,MAAM,GAAD,OAAIH,EAAJ,kBAAsBa,EAAtB,oBAAyCZ,IAAOX,MAAK,SAAAc,GAC/D,OAAIA,EAAII,GACCJ,EAAIC,OAENI,QAAQC,OAAO,IAAIC,MAAJ,yDAAyBE,EAAzB,2BACvB,GACF,CAEM,SAASxB,EAAawB,GAC3B,OAAOV,MAAM,GAAD,OAAIH,EAAJ,kBAAsBa,EAAtB,4BAAiDZ,IAAOX,MAClE,SAAAc,GAAG,OAAIA,EAAIC,MAAR,GAEN,CAEM,SAASS,EAAgBD,GAC9B,OAAOV,MAAM,GAAD,OAAIH,EAAJ,kBAAsBa,EAAtB,4BAAiDZ,IAAOX,MAClE,SAAAc,GAAG,OAAIA,EAAIC,MAAR,GAEN,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api-movie.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Section = styled.section`\r\n  padding: 0 16px 5px;\r\n  border-bottom: 1px solid black;\r\n`;\r\nSection.displayName = 'Section';\r\n\r\nexport const Img = styled.img`\r\n  max-width: 180px;\r\n  height: auto;\r\n`;\r\nImg.displayName = 'Img';\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getMovieCast } from 'services/api-movie';\r\nimport { Img, Section } from './Cast.styled';\r\n\r\nconst Cast = () => {\r\n  const { movieId } = useParams();\r\n  const [castList, setCastList] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getMovieCast(movieId).then(setCastList);\r\n  }, [movieId]);\r\n\r\n  if (!castList) {\r\n    return null;\r\n  }\r\n  const { cast } = castList;\r\n\r\n  return (\r\n    <Section>\r\n      <ul>\r\n        {cast.map(({ cast_id, name, character, profile_path }) => {\r\n          const img_path = `https://image.tmdb.org/t/p/w500${profile_path}`;\r\n          const dummy_path = `https://cdn-icons-png.flaticon.com/512/6813/6813432.png`;\r\n          return (\r\n            <li key={cast_id}>\r\n              {profile_path && <Img src={img_path} alt={name} />}\r\n              {!profile_path && <Img src={dummy_path} alt={name} />}\r\n              <p>{name}</p>\r\n              {character && <p>Character: {character}</p>}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","// /trending/get-trending - список самых популярных фильмов на сегодня для создания коллекции на главной странице.\r\n// /search/search-movies - поиск кинофильма по ключевому слову на странице фильмов.\r\n// /movies/get-movie-details - запрос полной информации о фильме для страницы кинофильма.\r\n// /movies/get-movie-credits - запрос информации о актёрском составе для страницы кинофильма.\r\n// /movies/get-movie-reviews - запрос обзоров для страницы кинофильма.\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst KEY = '479d2ea313055d36744e81dfb1070205';\r\n\r\nexport function getTrendingMovies() {\r\n  return fetch(`${BASE_URL}trending/movie/week?api_key=${KEY}`).then(res =>\r\n    res.json()\r\n  );\r\n}\r\n\r\nexport function getSearchMovies(searchQuery) {\r\n  return fetch(\r\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\r\n  ).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(\r\n      new Error(`Фильмов с названием ${searchQuery} нет :(`)\r\n    );\r\n  });\r\n}\r\n\r\nexport function getMovieDetails(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}?api_key=${KEY}`).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(new Error(`Фильма с ID ${muvieId} нет :(`));\r\n  });\r\n}\r\n\r\nexport function getMovieCast(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}/credits?api_key=${KEY}`).then(\r\n    res => res.json()\r\n  );\r\n}\r\n\r\nexport function getMovieReviews(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}/reviews?api_key=${KEY}`).then(\r\n    res => res.json()\r\n  );\r\n}\r\n"],"names":["Section","styled","displayName","Img","movieId","useParams","useState","castList","setCastList","useEffect","getMovieCast","then","cast","map","cast_id","name","character","profile_path","img_path","src","alt","BASE_URL","KEY","getTrendingMovies","fetch","res","json","getSearchMovies","searchQuery","ok","Promise","reject","Error","getMovieDetails","muvieId","getMovieReviews"],"sourceRoot":""}