{"version":3,"file":"static/js/36.ffebfb57.chunk.js","mappings":"mMAIaA,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAUG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACb,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,SACGI,KAFID,EADI,KASpB,C,qHChBYK,E,OAAMC,GAAAA,IAAH,4CAGhBD,EAAIE,YAAc,M,aCDLC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAiBA,OACE,SAACP,EAAD,WACE,kBAAMI,SAZS,SAAAI,GACjBA,EAAMC,iBAEwB,KAA1BH,EAAeI,OAInBN,EAASE,GAHPK,MAAM,4EAIT,EAIG,WACE,kBACEC,KAAK,OACLC,YAAY,eACZC,SArBqB,SAAAN,GAC3B,IAAMO,EAAWP,EAAMQ,cAAcC,MAAMC,cAC3CX,EAAkBQ,EACnB,KAoBK,mBAAQH,KAAK,SAAb,wBAIP,E,QCKD,EA/Be,WAAO,IAAD,EACnB,GAAuCP,EAAAA,EAAAA,UAAS,IAAhD,eAAOc,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAY,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,IAEnDC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GAAcI,KAAKR,EACpC,GAAE,CAACI,IAEJ,IAIMjC,EAAY4B,EAAaU,QAC/B,OAAKtC,GAKH,iCACE,SAACY,EAAD,CAAWC,SAXM,SAAAa,GACnBM,EAA0B,KAAVN,EAAe,CAAEa,OAAQb,GAAU,CAAC,EACrD,IAUI1B,EAAUwC,OAAS,IAAK,SAACzC,EAAA,EAAD,CAAWC,UAAWA,KAC7C4B,EAAaa,eAAiBR,IAC9B,cAAGS,MAAO,CAAEC,QAAS,QAASC,OAAQ,QAAtC,UACE,2DATC,IAcV,C,uJC/BD,IAAMC,EAAW,gCACXC,EAAM,mCAEL,SAASC,IACd,OAAOC,MAAM,GAAD,OAAIH,EAAJ,uCAA2CC,IAAOT,MAAK,SAAAY,GAAG,OACpEA,EAAIC,MADgE,GAGvE,CAEM,SAASd,EAAgBe,GAC9B,OAAOH,MAAM,GAAD,OACPH,EADO,iCAC0BC,EAD1B,kBACuCK,IACjDd,MAAK,SAAAY,GACL,OAAIA,EAAIG,GACCH,EAAIC,OAENG,QAAQC,OACb,IAAIC,MAAJ,mHAAiCJ,EAAjC,2BAEH,GACF,CAEM,SAASK,EAAgBC,GAC9B,OAAOT,MAAM,GAAD,OAAIH,EAAJ,kBAAsBY,EAAtB,oBAAyCX,IAAOT,MAAK,SAAAY,GAC/D,OAAIA,EAAIG,GACCH,EAAIC,OAENG,QAAQC,OAAO,IAAIC,MAAJ,yDAAyBE,EAAzB,2BACvB,GACF,CAEM,SAASC,EAAaD,GAC3B,OAAOT,MAAM,GAAD,OAAIH,EAAJ,kBAAsBY,EAAtB,4BAAiDX,IAAOT,MAClE,SAAAY,GAAG,OAAIA,EAAIC,MAAR,GAEN,CAEM,SAASS,EAAgBF,GAC9B,OAAOT,MAAM,GAAD,OAAIH,EAAJ,kBAAsBY,EAAtB,4BAAiDX,IAAOT,MAClE,SAAAY,GAAG,OAAIA,EAAIC,MAAR,GAEN,C","sources":["components/MovieList/MovieList.jsx","components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx","services/api-movie.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nexport const MovieList = ({ moviesRes }) => {\r\n  const location = useLocation();\r\n  // console.log(moviesRes);\r\n  return (\r\n    <ul>\r\n      {moviesRes.map(({ id, title }) => (\r\n        <li key={id}>\r\n          <Link to={`/movies/${id}`} state={{ from: location }}>\r\n            {title}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nMovieList.propTypes = {\r\n  moviesRes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Div = styled.div`\r\n  padding: 0 16px;\r\n`;\r\nDiv.displayName = 'Div';\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Div } from './SearchBox.styled';\r\n\r\nexport const SearchBox = ({ onSubmit }) => {\r\n  const [textFormLetter, setTextFormLetter] = useState('');\r\n\r\n  const handleTextFormChange = event => {\r\n    const evtValue = event.currentTarget.value.toLowerCase();\r\n    setTextFormLetter(evtValue);\r\n  };\r\n\r\n  const submitForm = event => {\r\n    event.preventDefault();\r\n\r\n    if (textFormLetter.trim() === '') {\r\n      alert('Введите текст');\r\n      return;\r\n    }\r\n    onSubmit(textFormLetter);\r\n  };\r\n\r\n  return (\r\n    <Div>\r\n      <form onSubmit={submitForm}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search movie\"\r\n          onChange={handleTextFormChange}\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    </Div>\r\n  );\r\n};\r\n\r\nSearchBox.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getSearchMovies } from 'services/api-movie';\r\nimport { MovieList } from 'components/MovieList/MovieList';\r\nimport { SearchBox } from 'components/SearchBox/SearchBox';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nconst Movies = () => {\r\n  const [moviesSearch, setMoviesSerch] = useState([]);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const filterParams = searchParams.get('filter') ?? '';\r\n\r\n  useEffect(() => {\r\n    getSearchMovies(filterParams).then(setMoviesSerch);\r\n  }, [filterParams]);\r\n\r\n  const changeFilter = value => {\r\n    setSearchParams(value !== '' ? { filter: value } : {});\r\n  };\r\n\r\n  const moviesRes = moviesSearch.results;\r\n  if (!moviesRes) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SearchBox onSubmit={changeFilter} />\r\n      {moviesRes.length > 0 && <MovieList moviesRes={moviesRes} />}\r\n      {!moviesSearch.total_results && filterParams && (\r\n        <p style={{ display: 'block', margin: '16px' }}>\r\n          <b> There is no such movie :(</b>\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n\r\n","// /trending/get-trending - список самых популярных фильмов на сегодня для создания коллекции на главной странице.\r\n// /search/search-movies - поиск кинофильма по ключевому слову на странице фильмов.\r\n// /movies/get-movie-details - запрос полной информации о фильме для страницы кинофильма.\r\n// /movies/get-movie-credits - запрос информации о актёрском составе для страницы кинофильма.\r\n// /movies/get-movie-reviews - запрос обзоров для страницы кинофильма.\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst KEY = '479d2ea313055d36744e81dfb1070205';\r\n\r\nexport function getTrendingMovies() {\r\n  return fetch(`${BASE_URL}trending/movie/week?api_key=${KEY}`).then(res =>\r\n    res.json()\r\n  );\r\n}\r\n\r\nexport function getSearchMovies(searchQuery) {\r\n  return fetch(\r\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\r\n  ).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(\r\n      new Error(`Фильмов с названием ${searchQuery} нет :(`)\r\n    );\r\n  });\r\n}\r\n\r\nexport function getMovieDetails(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}?api_key=${KEY}`).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(new Error(`Фильма с ID ${muvieId} нет :(`));\r\n  });\r\n}\r\n\r\nexport function getMovieCast(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}/credits?api_key=${KEY}`).then(\r\n    res => res.json()\r\n  );\r\n}\r\n\r\nexport function getMovieReviews(muvieId) {\r\n  return fetch(`${BASE_URL}/movie/${muvieId}/reviews?api_key=${KEY}`).then(\r\n    res => res.json()\r\n  );\r\n}\r\n"],"names":["MovieList","moviesRes","location","useLocation","map","id","title","to","state","from","Div","styled","displayName","SearchBox","onSubmit","useState","textFormLetter","setTextFormLetter","event","preventDefault","trim","alert","type","placeholder","onChange","evtValue","currentTarget","value","toLowerCase","moviesSearch","setMoviesSerch","useSearchParams","searchParams","setSearchParams","filterParams","get","useEffect","getSearchMovies","then","results","filter","length","total_results","style","display","margin","BASE_URL","KEY","getTrendingMovies","fetch","res","json","searchQuery","ok","Promise","reject","Error","getMovieDetails","muvieId","getMovieCast","getMovieReviews"],"sourceRoot":""}